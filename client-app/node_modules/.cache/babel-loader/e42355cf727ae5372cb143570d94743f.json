{"ast":null,"code":"import axios from 'axios';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\naxios.defaults.baseURL = 'http://localhost:5000/api';\naxios.interceptors.response.use(undefined, error => {\n  if (error.message === 'Network Error' && !error.response) {\n    toast.error('Network error - make sure API is running!');\n  }\n\n  const {\n    status,\n    data,\n    config\n  } = error.response;\n\n  if (status === 404) {\n    history.push('/notfound');\n  }\n\n  if (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id')) {\n    history.push('/notfound');\n  }\n\n  if (status === 500) {\n    toast.error('Server error - check the terminal for more info!');\n  }\n\n  throw error;\n});\n\nconst responseBody = response => response.data;\n\nconst sleep = ms => response => new Promise(resolve => setTimeout(() => resolve(response), ms));\n\nconst requests = {\n  get: url => axios.get(url).then(sleep(1000)).then(responseBody),\n  post: (url, body) => axios.post(url, body).then(sleep(1000)).then(responseBody),\n  put: (url, body) => axios.put(url, body).then(sleep(1000)).then(responseBody),\n  del: url => axios.delete(url).then(sleep(1000)).then(responseBody)\n};\nconst Activities = {\n  list: () => requests.get('/activities'),\n  details: id => requests.get(`/activities/${id}`),\n  create: activity => requests.post('/activities', activity),\n  update: activity => requests.put(`/activities/${activity.id}`, activity),\n  delete: id => requests.del(`/activities/${id}`)\n};\nconst User = {\n  current: () => requests.get('/user'),\n  login: user => requests.post(`/user/login`, user),\n  register: user => requests.post(`/user/register`, user)\n};\nexport default {\n  Activities\n};","map":{"version":3,"sources":["D:/Development/VSCode/reactdemo/Reactivities/client-app/src/app/api/agent.ts"],"names":["axios","history","toast","defaults","baseURL","interceptors","response","use","undefined","error","message","status","data","config","push","method","errors","hasOwnProperty","responseBody","sleep","ms","Promise","resolve","setTimeout","requests","get","url","then","post","body","put","del","delete","Activities","list","details","id","create","activity","update","User","current","login","user","register"],"mappings":"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","sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { IActivity } from '../models/activity';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\nimport { IUser, IUserFormValues } from '../models/user';\n\naxios.defaults.baseURL = 'http://localhost:5000/api';\n\naxios.interceptors.response.use(undefined, error => {\n    if (error.message === 'Network Error' && !error.response) {\n        toast.error('Network error - make sure API is running!')\n    }\n    const {status, data, config} = error.response;\n    if (status === 404) {\n        history.push('/notfound')\n    }\n    if (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id')) {\n        history.push('/notfound')\n    }\n    if (status === 500) {\n        toast.error('Server error - check the terminal for more info!')\n    }\n    throw error;\n})\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\nconst sleep = (ms: number) => (response: AxiosResponse) => \n    new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms));\n\nconst requests = {\n    get: (url: string) => axios.get(url).then(sleep(1000)).then(responseBody),\n    post: (url: string, body: {}) => axios.post(url, body).then(sleep(1000)).then(responseBody),\n    put: (url: string, body: {}) => axios.put(url, body).then(sleep(1000)).then(responseBody),\n    del: (url: string) => axios.delete(url).then(sleep(1000)).then(responseBody) \n};\n\nconst Activities = {\n    list: (): Promise<IActivity[]> => requests.get('/activities'),\n    details: (id: string) => requests.get(`/activities/${id}`),\n    create: (activity: IActivity) => requests.post('/activities', activity),\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del(`/activities/${id}`)\n}\n\nconst User = {\n    current: (): Promise<IUser> => requests.get('/user'),\n    login: (user: IUserFormValues): Promise<IUser> => requests.post(`/user/login`, user),\n    register: (user: IUserFormValues): Promise<IUser> => requests.post(`/user/register`, user),\n}\n\nexport default {\n    Activities\n}"]},"metadata":{},"sourceType":"module"}