{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\VSCode\\\\reactdemo\\\\Reactivities\\\\client-app\\\\src\\\\app\\\\common\\\\photoUpload\\\\PhotoWidgetCropper.tsx\";\nimport React, { useRef } from 'react';\nimport Cropper from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\nconst PhotoWidgetCropper = ({\n  setImage,\n  imagePreview\n}) => {\n  const cropper = useRef(null);\n\n  const cropImage = () => {\n    if (cropper.current && typeof cropper.current.getCroppedCanvas() === 'undefined') {\n      return;\n    } // cropper &&\n    //   cropper.current &&\n    //   cropper.current.getCroppedCanvas().toBlob((blob: any) => {\n    //     setImage(blob);\n    //   }, 'image/jpeg');\n\n  };\n\n  return React.createElement(Cropper // ref={cropper}\n  , {\n    src: imagePreview,\n    style: {\n      height: 200,\n      width: '100%'\n    } // Cropper.js options\n    ,\n    aspectRatio: 1 / 1,\n    preview: \".img-preview\",\n    guides: false,\n    viewMode: 1,\n    dragMode: \"move\",\n    scalable: true,\n    cropBoxMovable: true,\n    cropBoxResizable: true,\n    crop: cropImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  });\n};\n\nexport default PhotoWidgetCropper;","map":{"version":3,"sources":["D:/Development/VSCode/reactdemo/Reactivities/client-app/src/app/common/photoUpload/PhotoWidgetCropper.tsx"],"names":["React","useRef","Cropper","PhotoWidgetCropper","setImage","imagePreview","cropper","cropImage","current","getCroppedCanvas","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAO,4BAAP;;AAOA,MAAMC,kBAAoC,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAgC;AAC3E,QAAMC,OAAO,GAAGL,MAAM,CAAU,IAAV,CAAtB;;AAEA,QAAMM,SAAS,GAAG,MAAM;AACtB,QACED,OAAO,CAACE,OAAR,IACA,OAAOF,OAAO,CAACE,OAAR,CAAgBC,gBAAhB,EAAP,KAA8C,WAFhD,EAGE;AACA;AACD,KANqB,CAOtB;AACA;AACA;AACA;AACA;;AACD,GAZD;;AAcA,SACE,oBAAC,OAAD,CACE;AADF;AAEE,IAAA,GAAG,EAAEJ,YAFP;AAGE,IAAA,KAAK,EAAE;AAAEK,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAHT,CAIE;AAJF;AAKE,IAAA,WAAW,EAAE,IAAI,CALnB;AAME,IAAA,OAAO,EAAC,cANV;AAOE,IAAA,MAAM,EAAE,KAPV;AAQE,IAAA,QAAQ,EAAE,CARZ;AASE,IAAA,QAAQ,EAAC,MATX;AAUE,IAAA,QAAQ,EAAE,IAVZ;AAWE,IAAA,cAAc,EAAE,IAXlB;AAYE,IAAA,gBAAgB,EAAE,IAZpB;AAaE,IAAA,IAAI,EAAEJ,SAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAiBD,CAlCD;;AAoCA,eAAeJ,kBAAf","sourcesContent":["import React, { useRef } from 'react';\r\nimport Cropper from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface IProps {\r\n  setImage: (file: Blob) => void;\r\n  imagePreview: string;\r\n}\r\n\r\nconst PhotoWidgetCropper: React.FC<IProps> = ({ setImage, imagePreview }) => {\r\n  const cropper = useRef<Cropper>(null);\r\n\r\n  const cropImage = () => {\r\n    if (\r\n      cropper.current &&\r\n      typeof cropper.current.getCroppedCanvas() === 'undefined'\r\n    ) {\r\n      return;\r\n    }\r\n    // cropper &&\r\n    //   cropper.current &&\r\n    //   cropper.current.getCroppedCanvas().toBlob((blob: any) => {\r\n    //     setImage(blob);\r\n    //   }, 'image/jpeg');\r\n  };\r\n\r\n  return (\r\n    <Cropper\r\n      // ref={cropper}\r\n      src={imagePreview}\r\n      style={{ height: 200, width: '100%' }}\r\n      // Cropper.js options\r\n      aspectRatio={1 / 1}\r\n      preview='.img-preview'\r\n      guides={false}\r\n      viewMode={1}\r\n      dragMode='move'\r\n      scalable={true}\r\n      cropBoxMovable={true}\r\n      cropBoxResizable={true}\r\n      crop={cropImage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PhotoWidgetCropper;\r\n"]},"metadata":{},"sourceType":"module"}