{"ast":null,"code":"import _initializerDefineProperty from \"D:\\\\Development\\\\VSCode\\\\reactdemo\\\\Reactivities\\\\client-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"D:\\\\Development\\\\VSCode\\\\reactdemo\\\\Reactivities\\\\client-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"D:\\\\Development\\\\VSCode\\\\reactdemo\\\\Reactivities\\\\client-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _temp;\n\nimport { observable, action, runInAction, computed } from 'mobx';\nimport agent from '../api/agent';\nimport { toast } from 'react-toastify';\nlet ProfileStore = (_class = (_temp = class ProfileStore {\n  constructor(rootStore) {\n    this.rootStore = void 0;\n\n    _initializerDefineProperty(this, \"profile\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"loadingProfile\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"uploadingPhoto\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"loading\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"loadProfile\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"uploadPhoto\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"setMainPhoto\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"deletePhoto\", _descriptor8, this);\n\n    this.rootStore = rootStore;\n  }\n\n  get isCurrentUser() {\n    if (this.rootStore.userStore.user && this.profile) {\n      return this.rootStore.userStore.user.username === this.profile.username;\n    } else {\n      return false;\n    }\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"profile\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"loadingProfile\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return true;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"uploadingPhoto\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"loading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"isCurrentUser\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isCurrentUser\"), _class.prototype), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"loadProfile\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async username => {\n      this.loadingProfile = true;\n\n      try {\n        const profile = await agent.Profiles.get(username);\n        runInAction(() => {\n          this.profile = profile;\n          this.loadingProfile = false;\n        });\n      } catch (error) {\n        runInAction(() => {\n          this.loadingProfile = false;\n        });\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"uploadPhoto\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async file => {\n      this.uploadingPhoto = true;\n\n      try {\n        const photo = await agent.Profiles.uploadPhoto(file);\n        runInAction(() => {\n          if (this.profile) {\n            this.profile.photos.push(photo);\n\n            if (photo.isMain && this.rootStore.userStore.user) {\n              this.rootStore.userStore.user.image = photo.url;\n              this.profile.image = photo.url;\n            }\n          }\n\n          this.uploadingPhoto = false;\n        });\n      } catch (error) {\n        console.log(error);\n        toast.error('Problem uploading photo');\n        runInAction(() => {\n          this.uploadingPhoto = false;\n        });\n      }\n    };\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"setMainPhoto\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async photo => {\n      this.loading = true;\n\n      try {\n        await agent.Profiles.setMainPhoto(photo.id);\n        runInAction(() => {\n          this.rootStore.userStore.user.image = photo.url;\n          this.profile.photos.find(a => a.isMain).isMain = false;\n          this.profile.photos.find(a => a.id === photo.id).isMain = true;\n          this.profile.image = photo.url;\n          this.loading = false;\n        });\n      } catch (error) {\n        toast.error('Problem setting photo as main');\n        runInAction(() => {\n          this.loading = false;\n        });\n      }\n    };\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"deletePhoto\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async photo => {\n      this.loading = true;\n\n      try {\n        await agent.Profiles.deletePhoto(photo.id);\n        runInAction(() => {\n          this.profile.photos = this.profile.photos.filter(a => a.id !== photo.id);\n          this.loading = false;\n        });\n      } catch (error) {\n        toast.error('Problem deleting the photo');\n        runInAction(() => {\n          this.loading = false;\n        });\n      }\n    };\n  }\n})), _class);\nexport { ProfileStore as default };","map":{"version":3,"sources":["D:/Development/VSCode/reactdemo/Reactivities/client-app/src/app/stores/profileStore.ts"],"names":["observable","action","runInAction","computed","agent","toast","ProfileStore","constructor","rootStore","isCurrentUser","userStore","user","profile","username","loadingProfile","Profiles","get","error","console","log","file","uploadingPhoto","photo","uploadPhoto","photos","push","isMain","image","url","loading","setMainPhoto","id","find","a","deletePhoto","filter"],"mappings":"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","sourcesContent":["import {RootStore} from './rootStore';\r\nimport { observable, action, runInAction, computed } from 'mobx';\r\nimport { IProfile, IPhoto } from '../models/profile';\r\nimport agent from '../api/agent';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default class ProfileStore {\r\n    rootStore: RootStore\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    @observable profile: IProfile | null = null;\r\n    @observable loadingProfile = true;\r\n    @observable uploadingPhoto = false;\r\n    @observable loading = false;\r\n\r\n    @computed get isCurrentUser() {\r\n        if (this.rootStore.userStore.user && this.profile) {\r\n            return this.rootStore.userStore.user.username === this.profile.username\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @action loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loadingProfile = false;\r\n            })\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    @action uploadPhoto = async (file: Blob) => {\r\n        this.uploadingPhoto = true;\r\n        try {\r\n            const photo = await agent.Profiles.uploadPhoto(file);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos.push(photo);\r\n                    if (photo.isMain && this.rootStore.userStore.user) {\r\n                        this.rootStore.userStore.user.image = photo.url;\r\n                        this.profile.image = photo.url\r\n                    }\r\n                }\r\n                this.uploadingPhoto = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            toast.error('Problem uploading photo')\r\n            runInAction(() => {\r\n                this.uploadingPhoto = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    @action setMainPhoto = async (photo: IPhoto) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            runInAction(() => {\r\n                this.rootStore.userStore.user!.image = photo.url;\r\n                this.profile!.photos.find(a => a.isMain)!.isMain = false;\r\n                this.profile!.photos.find(a => a.id === photo.id)!.isMain = true;\r\n                this.profile!.image = photo.url;\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            toast.error('Problem setting photo as main');\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    @action deletePhoto = async (photo: IPhoto) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                this.profile!.photos = this.profile!.photos.filter(a => a.id !== photo.id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            toast.error('Problem deleting the photo');\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}