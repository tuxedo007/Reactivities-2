{"ast":null,"code":"import _initializerDefineProperty from \"D:\\\\Development\\\\VSCode\\\\reactdemo\\\\Reactivities\\\\client-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"D:\\\\Development\\\\VSCode\\\\reactdemo\\\\Reactivities\\\\client-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"D:\\\\Development\\\\VSCode\\\\reactdemo\\\\Reactivities\\\\client-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _temp;\n\nimport { observable, action, computed, runInAction } from 'mobx';\nimport agent from '../api/agent';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\nimport { setActivityProps } from '../common/util/util';\nlet ActivityStore = (_class = (_temp = class ActivityStore {\n  constructor(rootStore) {\n    this.rootStore = void 0;\n\n    _initializerDefineProperty(this, \"activityRegistry\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"activity\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"loadingInitial\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"submitting\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"target\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"loadActivities\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"loadActivity\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"clearActivity\", _descriptor8, this);\n\n    this.getActivity = id => {\n      return this.activityRegistry.get(id);\n    };\n\n    _initializerDefineProperty(this, \"createActivity\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"editActivity\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"deleteActivity\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"attendActivity\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"cancelAttendance\", _descriptor13, this);\n\n    this.rootStore = rootStore;\n  }\n\n  get activitiesByDate() {\n    return this.groupActivitiesByDate(Array.from(this.activityRegistry.values()));\n  }\n\n  groupActivitiesByDate(activities) {\n    const sortedActivities = activities.sort((a, b) => a.date.getTime() - b.date.getTime());\n    return Object.entries(sortedActivities.reduce((activities, activity) => {\n      const date = activity.date.toISOString().split('T')[0];\n      activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n      return activities;\n    }, {}));\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"activityRegistry\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return new Map();\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"activity\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"loadingInitial\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"submitting\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"target\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"activitiesByDate\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"activitiesByDate\"), _class.prototype), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"loadActivities\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.loadingInitial = true;\n\n      try {\n        const activities = await agent.Activities.list();\n        runInAction('loading activities', () => {\n          activities.forEach(activity => {\n            setActivityProps(activity, this.rootStore.userStore.user);\n            this.activityRegistry.set(activity.id, activity);\n          });\n          this.loadingInitial = false;\n        });\n      } catch (error) {\n        runInAction('load activities error', () => {\n          this.loadingInitial = false;\n        });\n      }\n    };\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"loadActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async id => {\n      let activity = this.getActivity(id);\n\n      if (activity) {\n        this.activity = activity;\n        return activity;\n      } else {\n        this.loadingInitial = true;\n\n        try {\n          activity = await agent.Activities.details(id);\n          runInAction('getting activity', () => {\n            setActivityProps(activity, this.rootStore.userStore.user);\n            this.activity = activity;\n            this.activityRegistry.set(activity.id, activity);\n            this.loadingInitial = false;\n          });\n          return activity;\n        } catch (error) {\n          runInAction('get activity error', () => {\n            this.loadingInitial = false;\n          });\n          console.log(error);\n        }\n      }\n    };\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"clearActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.activity = null;\n    };\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"createActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async activity => {\n      this.submitting = true;\n\n      try {\n        await agent.Activities.create(activity);\n        runInAction('create activity', () => {\n          this.activityRegistry.set(activity.id, activity);\n          this.submitting = false;\n        });\n        history.push(`/activities/${activity.id}`);\n      } catch (error) {\n        runInAction('create activity error', () => {\n          this.submitting = false;\n        });\n        toast.error('Problem submitting data');\n        console.log(error.response);\n      }\n    };\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"editActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async activity => {\n      this.submitting = true;\n\n      try {\n        await agent.Activities.update(activity);\n        runInAction('editing activity', () => {\n          this.activityRegistry.set(activity.id, activity);\n          this.activity = activity;\n          this.submitting = false;\n        });\n        history.push(`/activities/${activity.id}`);\n      } catch (error) {\n        runInAction('edit activity error', () => {\n          this.submitting = false;\n        });\n        toast.error('Problem submitting data');\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"deleteActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async (event, id) => {\n      this.submitting = true;\n      this.target = event.currentTarget.name;\n\n      try {\n        await agent.Activities.delete(id);\n        runInAction('deleting activity', () => {\n          this.activityRegistry.delete(id);\n          this.submitting = false;\n          this.target = '';\n        });\n      } catch (error) {\n        runInAction('delete activity error', () => {\n          this.submitting = false;\n          this.target = '';\n        });\n        console.log(error);\n      }\n    };\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"attendActivity\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      const attendee = createAttendee(this.rootStore.userStore.user);\n      this.loading = true;\n\n      try {\n        await agent.Activities.attend(this.activity.id);\n        runInAction(() => {\n          if (this.activity) {\n            this.activity.attendees.push(attendee);\n            this.activity.isGoing = true;\n            this.activityRegistry.set(this.activity.id, this.activity);\n            this.loading = false;\n          }\n        });\n      } catch (error) {\n        runInAction(() => {\n          this.loading = false;\n        });\n        toast.error('Problem signing up to activity');\n      }\n    };\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"cancelAttendance\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.loading = true;\n\n      try {\n        await agent.Activities.unattend(this.activity.id);\n        runInAction(() => {\n          if (this.activity) {\n            this.activity.attendees = this.activity.attendees.filter(a => a.username !== this.rootStore.userStore.user.username);\n            this.activity.isGoing = false;\n            this.activityRegistry.set(this.activity.id, this.activity);\n            this.loading = false;\n          }\n        });\n      } catch (error) {\n        runInAction(() => {\n          this.loading = false;\n        });\n        toast.error('Problem cancelling attendance');\n      }\n    };\n  }\n})), _class);\nexport { ActivityStore as default };","map":{"version":3,"sources":["D:/Development/VSCode/reactdemo/Reactivities/client-app/src/app/stores/activityStore.ts"],"names":["observable","action","computed","runInAction","agent","history","toast","setActivityProps","ActivityStore","constructor","rootStore","getActivity","id","activityRegistry","get","activitiesByDate","groupActivitiesByDate","Array","from","values","activities","sortedActivities","sort","a","b","date","getTime","Object","entries","reduce","activity","toISOString","split","Map","loadingInitial","Activities","list","forEach","userStore","user","set","error","details","console","log","submitting","create","push","response","update","event","target","currentTarget","name","delete","attendee","createAttendee","loading","attend","attendees","isGoing","unattend","filter","username"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,WAAvC,QAA0D,MAA1D;AAGA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,SAASC,gBAAT,QAAiC,qBAAjC;IAEqBC,a,sBAAN,MAAMA,aAAN,CAAoB;AAEjCC,EAAAA,WAAW,CAACC,SAAD,EAAuB;AAAA,SADlCA,SACkC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,SAwElCC,WAxEkC,GAwEnBC,EAAD,IAAgB;AAC5B,aAAO,KAAKC,gBAAL,CAAsBC,GAAtB,CAA0BF,EAA1B,CAAP;AACD,KA1EiC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAChC,SAAKF,SAAL,GAAiBA,SAAjB;AACD;;AAQD,MAAcK,gBAAd,GAAiC;AAC/B,WAAO,KAAKC,qBAAL,CAA2BC,KAAK,CAACC,IAAN,CAAW,KAAKL,gBAAL,CAAsBM,MAAtB,EAAX,CAA3B,CAAP;AACD;;AAEDH,EAAAA,qBAAqB,CAACI,UAAD,EAA0B;AAC7C,UAAMC,gBAAgB,GAAGD,UAAU,CAACE,IAAX,CACvB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,IAAF,CAAOC,OAAP,KAAmBF,CAAC,CAACC,IAAF,CAAOC,OAAP,EADN,CAAzB;AAGA,WAAOC,MAAM,CAACC,OAAP,CAAeP,gBAAgB,CAACQ,MAAjB,CAAwB,CAACT,UAAD,EAAaU,QAAb,KAA0B;AACtE,YAAML,IAAI,GAAGK,QAAQ,CAACL,IAAT,CAAcM,WAAd,GAA4BC,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAb;AACAZ,MAAAA,UAAU,CAACK,IAAD,CAAV,GAAmBL,UAAU,CAACK,IAAD,CAAV,GAAmB,CAAC,GAAGL,UAAU,CAACK,IAAD,CAAd,EAAsBK,QAAtB,CAAnB,GAAqD,CAACA,QAAD,CAAxE;AACA,aAAOV,UAAP;AACD,KAJqB,EAInB,EAJmB,CAAf,CAAP;AAKD;;AAzBgC,C,0FAMhCpB,U;;;;;WAA8B,IAAIiC,GAAJ,E;;4EAC9BjC,U;;;;;WAAwC,I;;kFACxCA,U;;;;;WAA4B,K;;8EAC5BA,U;;;;;WAAwB,K;;0EACxBA,U;;;;;WAAoB,E;;qEAEpBE,Q,2KAeAD,M;;;;;WAAwB,YAAY;AACnC,WAAKiC,cAAL,GAAsB,IAAtB;;AACA,UAAI;AACF,cAAMd,UAAU,GAAG,MAAMhB,KAAK,CAAC+B,UAAN,CAAiBC,IAAjB,EAAzB;AACAjC,QAAAA,WAAW,CAAC,oBAAD,EAAuB,MAAM;AACtCiB,UAAAA,UAAU,CAACiB,OAAX,CAAmBP,QAAQ,IAAI;AAC7BvB,YAAAA,gBAAgB,CAACuB,QAAD,EAAW,KAAKpB,SAAL,CAAe4B,SAAf,CAAyBC,IAApC,CAAhB;AACA,iBAAK1B,gBAAL,CAAsB2B,GAAtB,CAA0BV,QAAQ,CAAClB,EAAnC,EAAuCkB,QAAvC;AACD,WAHD;AAIA,eAAKI,cAAL,GAAsB,KAAtB;AACD,SANU,CAAX;AAOD,OATD,CASE,OAAOO,KAAP,EAAc;AACdtC,QAAAA,WAAW,CAAC,uBAAD,EAA0B,MAAM;AACzC,eAAK+B,cAAL,GAAsB,KAAtB;AACD,SAFU,CAAX;AAGD;AACF,K;;gFAEAjC,M;;;;;WAAsB,MAAOW,EAAP,IAAsB;AAC3C,UAAIkB,QAAQ,GAAG,KAAKnB,WAAL,CAAiBC,EAAjB,CAAf;;AACA,UAAIkB,QAAJ,EAAc;AACZ,aAAKA,QAAL,GAAgBA,QAAhB;AACA,eAAOA,QAAP;AACD,OAHD,MAGO;AACL,aAAKI,cAAL,GAAsB,IAAtB;;AACA,YAAI;AACFJ,UAAAA,QAAQ,GAAG,MAAM1B,KAAK,CAAC+B,UAAN,CAAiBO,OAAjB,CAAyB9B,EAAzB,CAAjB;AACAT,UAAAA,WAAW,CAAC,kBAAD,EAAoB,MAAM;AACnCI,YAAAA,gBAAgB,CAACuB,QAAD,EAAW,KAAKpB,SAAL,CAAe4B,SAAf,CAAyBC,IAApC,CAAhB;AACA,iBAAKT,QAAL,GAAgBA,QAAhB;AACA,iBAAKjB,gBAAL,CAAsB2B,GAAtB,CAA0BV,QAAQ,CAAClB,EAAnC,EAAuCkB,QAAvC;AACA,iBAAKI,cAAL,GAAsB,KAAtB;AACD,WALU,CAAX;AAMA,iBAAOJ,QAAP;AACD,SATD,CASE,OAAOW,KAAP,EAAc;AACdtC,UAAAA,WAAW,CAAC,oBAAD,EAAuB,MAAM;AACtC,iBAAK+B,cAAL,GAAsB,KAAtB;AACD,WAFU,CAAX;AAGAS,UAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACD;AACF;AACF,K;;iFAEAxC,M;;;;;WAAuB,MAAM;AAC5B,WAAK6B,QAAL,GAAgB,IAAhB;AACD,K;;kFAMA7B,M;;;;;WAAwB,MAAO6B,QAAP,IAA+B;AACtD,WAAKe,UAAL,GAAkB,IAAlB;;AACA,UAAI;AACF,cAAMzC,KAAK,CAAC+B,UAAN,CAAiBW,MAAjB,CAAwBhB,QAAxB,CAAN;AACA3B,QAAAA,WAAW,CAAC,iBAAD,EAAoB,MAAM;AACnC,eAAKU,gBAAL,CAAsB2B,GAAtB,CAA0BV,QAAQ,CAAClB,EAAnC,EAAuCkB,QAAvC;AACA,eAAKe,UAAL,GAAkB,KAAlB;AACD,SAHU,CAAX;AAIAxC,QAAAA,OAAO,CAAC0C,IAAR,CAAc,eAAcjB,QAAQ,CAAClB,EAAG,EAAxC;AACD,OAPD,CAOE,OAAO6B,KAAP,EAAc;AACdtC,QAAAA,WAAW,CAAC,uBAAD,EAA0B,MAAM;AACzC,eAAK0C,UAAL,GAAkB,KAAlB;AACD,SAFU,CAAX;AAGAvC,QAAAA,KAAK,CAACmC,KAAN,CAAY,yBAAZ;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACO,QAAlB;AACD;AACF,K;;iFAEA/C,M;;;;;WAAsB,MAAO6B,QAAP,IAA+B;AACpD,WAAKe,UAAL,GAAkB,IAAlB;;AACA,UAAI;AACF,cAAMzC,KAAK,CAAC+B,UAAN,CAAiBc,MAAjB,CAAwBnB,QAAxB,CAAN;AACA3B,QAAAA,WAAW,CAAC,kBAAD,EAAqB,MAAM;AACpC,eAAKU,gBAAL,CAAsB2B,GAAtB,CAA0BV,QAAQ,CAAClB,EAAnC,EAAuCkB,QAAvC;AACA,eAAKA,QAAL,GAAgBA,QAAhB;AACA,eAAKe,UAAL,GAAkB,KAAlB;AACD,SAJU,CAAX;AAKAxC,QAAAA,OAAO,CAAC0C,IAAR,CAAc,eAAcjB,QAAQ,CAAClB,EAAG,EAAxC;AACD,OARD,CAQE,OAAO6B,KAAP,EAAc;AACdtC,QAAAA,WAAW,CAAC,qBAAD,EAAwB,MAAM;AACvC,eAAK0C,UAAL,GAAkB,KAAlB;AACD,SAFU,CAAX;AAGAvC,QAAAA,KAAK,CAACmC,KAAN,CAAY,yBAAZ;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACD;AACF,K;;mFAEAxC,M;;;;;WAAwB,OAAOiD,KAAP,EAAiDtC,EAAjD,KAAgE;AACvF,WAAKiC,UAAL,GAAkB,IAAlB;AACA,WAAKM,MAAL,GAAcD,KAAK,CAACE,aAAN,CAAoBC,IAAlC;;AACA,UAAI;AACF,cAAMjD,KAAK,CAAC+B,UAAN,CAAiBmB,MAAjB,CAAwB1C,EAAxB,CAAN;AACAT,QAAAA,WAAW,CAAC,mBAAD,EAAsB,MAAM;AACrC,eAAKU,gBAAL,CAAsByC,MAAtB,CAA6B1C,EAA7B;AACA,eAAKiC,UAAL,GAAkB,KAAlB;AACA,eAAKM,MAAL,GAAc,EAAd;AACD,SAJU,CAAX;AAKD,OAPD,CAOE,OAAOV,KAAP,EAAc;AACdtC,QAAAA,WAAW,CAAC,uBAAD,EAA0B,MAAM;AACzC,eAAK0C,UAAL,GAAkB,KAAlB;AACA,eAAKM,MAAL,GAAc,EAAd;AACD,SAHU,CAAX;AAIAR,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACD;AACF,K;;mFAEAxC,M;;;;;WAAwB,YAAY;AACnC,YAAMsD,QAAQ,GAAGC,cAAc,CAAC,KAAK9C,SAAL,CAAe4B,SAAf,CAAyBC,IAA1B,CAA/B;AACA,WAAKkB,OAAL,GAAe,IAAf;;AACA,UAAI;AACF,cAAMrD,KAAK,CAAC+B,UAAN,CAAiBuB,MAAjB,CAAwB,KAAK5B,QAAL,CAAelB,EAAvC,CAAN;AACAT,QAAAA,WAAW,CAAC,MAAM;AAChB,cAAI,KAAK2B,QAAT,EAAmB;AACjB,iBAAKA,QAAL,CAAc6B,SAAd,CAAwBZ,IAAxB,CAA6BQ,QAA7B;AACA,iBAAKzB,QAAL,CAAc8B,OAAd,GAAwB,IAAxB;AACA,iBAAK/C,gBAAL,CAAsB2B,GAAtB,CAA0B,KAAKV,QAAL,CAAclB,EAAxC,EAA4C,KAAKkB,QAAjD;AACA,iBAAK2B,OAAL,GAAe,KAAf;AACD;AACF,SAPU,CAAX;AAQD,OAVD,CAUE,OAAOhB,KAAP,EAAc;AACdtC,QAAAA,WAAW,CAAC,MAAM;AAChB,eAAKsD,OAAL,GAAe,KAAf;AACD,SAFU,CAAX;AAGAnD,QAAAA,KAAK,CAACmC,KAAN,CAAY,gCAAZ;AACD;AACF,K;;qFAEAxC,M;;;;;WAA0B,YAAY;AACrC,WAAKwD,OAAL,GAAe,IAAf;;AACA,UAAI;AACF,cAAMrD,KAAK,CAAC+B,UAAN,CAAiB0B,QAAjB,CAA0B,KAAK/B,QAAL,CAAelB,EAAzC,CAAN;AACAT,QAAAA,WAAW,CAAC,MAAM;AAChB,cAAI,KAAK2B,QAAT,EAAmB;AACjB,iBAAKA,QAAL,CAAc6B,SAAd,GAA0B,KAAK7B,QAAL,CAAc6B,SAAd,CAAwBG,MAAxB,CACxBvC,CAAC,IAAIA,CAAC,CAACwC,QAAF,KAAe,KAAKrD,SAAL,CAAe4B,SAAf,CAAyBC,IAAzB,CAA+BwB,QAD3B,CAA1B;AAGA,iBAAKjC,QAAL,CAAc8B,OAAd,GAAwB,KAAxB;AACA,iBAAK/C,gBAAL,CAAsB2B,GAAtB,CAA0B,KAAKV,QAAL,CAAclB,EAAxC,EAA4C,KAAKkB,QAAjD;AACA,iBAAK2B,OAAL,GAAe,KAAf;AACD;AACF,SATU,CAAX;AAUD,OAZD,CAYE,OAAOhB,KAAP,EAAc;AACdtC,QAAAA,WAAW,CAAC,MAAM;AAChB,eAAKsD,OAAL,GAAe,KAAf;AACD,SAFU,CAAX;AAGAnD,QAAAA,KAAK,CAACmC,KAAN,CAAY,+BAAZ;AACD;AACF,K;;;SA/KkBjC,a","sourcesContent":["import { observable, action, computed, runInAction } from 'mobx';\nimport { SyntheticEvent } from 'react';\nimport { IActivity } from '../models/activity';\nimport agent from '../api/agent';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\nimport {RootStore} from './rootStore';\nimport { setActivityProps } from '../common/util/util';\n\nexport default class ActivityStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n\n  @observable activityRegistry = new Map();\n  @observable activity: IActivity | null = null;\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable target = '';\n\n  @computed get activitiesByDate() {\n    return this.groupActivitiesByDate(Array.from(this.activityRegistry.values()))\n  }\n\n  groupActivitiesByDate(activities: IActivity[]) {\n    const sortedActivities = activities.sort(\n      (a, b) => a.date.getTime() - b.date.getTime()\n    )\n    return Object.entries(sortedActivities.reduce((activities, activity) => {\n      const date = activity.date.toISOString().split('T')[0];\n      activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n      return activities;\n    }, {} as {[key: string]: IActivity[]}));\n  }\n\n  @action loadActivities = async () => {\n    this.loadingInitial = true;\n    try {\n      const activities = await agent.Activities.list();\n      runInAction('loading activities', () => {\n        activities.forEach(activity => {\n          setActivityProps(activity, this.rootStore.userStore.user!)\n          this.activityRegistry.set(activity.id, activity);\n        });\n        this.loadingInitial = false;\n      })\n    } catch (error) {\n      runInAction('load activities error', () => {\n        this.loadingInitial = false;\n      })\n    }\n  };\n\n  @action loadActivity = async (id: string) => {\n    let activity = this.getActivity(id);\n    if (activity) {\n      this.activity = activity;\n      return activity;\n    } else {\n      this.loadingInitial = true;\n      try {\n        activity = await agent.Activities.details(id);\n        runInAction('getting activity',() => {\n          setActivityProps(activity, this.rootStore.userStore.user!)\n          this.activity = activity;\n          this.activityRegistry.set(activity.id, activity);\n          this.loadingInitial = false;\n        })\n        return activity;\n      } catch (error) {\n        runInAction('get activity error', () => {\n          this.loadingInitial = false;\n        })\n        console.log(error);\n      }\n    }\n  }\n\n  @action clearActivity = () => {\n    this.activity = null;\n  }\n\n  getActivity = (id: string) => {\n    return this.activityRegistry.get(id);\n  }\n\n  @action createActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.create(activity);\n      runInAction('create activity', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      })\n      history.push(`/activities/${activity.id}`)\n    } catch (error) {\n      runInAction('create activity error', () => {\n        this.submitting = false;\n      })\n      toast.error('Problem submitting data');\n      console.log(error.response);\n    }\n  };\n\n  @action editActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.update(activity);\n      runInAction('editing activity', () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.activity = activity;\n        this.submitting = false;\n      })\n      history.push(`/activities/${activity.id}`)\n    } catch (error) {\n      runInAction('edit activity error', () => {\n        this.submitting = false;\n      })\n      toast.error('Problem submitting data');\n      console.log(error);\n    }\n  };\n\n  @action deleteActivity = async (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\n    this.submitting = true;\n    this.target = event.currentTarget.name;\n    try {\n      await agent.Activities.delete(id);\n      runInAction('deleting activity', () => {\n        this.activityRegistry.delete(id);\n        this.submitting = false;\n        this.target = '';\n      })\n    } catch (error) {\n      runInAction('delete activity error', () => {\n        this.submitting = false;\n        this.target = '';\n      })\n      console.log(error);\n    }\n  }\n\n  @action attendActivity = async () => {\n    const attendee = createAttendee(this.rootStore.userStore.user!);\n    this.loading = true;\n    try {\n      await agent.Activities.attend(this.activity!.id);\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees.push(attendee);\n          this.activity.isGoing = true;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          this.loading = false;\n        }\n      })\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      })\n      toast.error('Problem signing up to activity');\n    }\n  };\n\n  @action cancelAttendance = async () => {\n    this.loading = true;\n    try {\n      await agent.Activities.unattend(this.activity!.id);\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees = this.activity.attendees.filter(\n            a => a.username !== this.rootStore.userStore.user!.username\n          );\n          this.activity.isGoing = false;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          this.loading = false;\n        }\n      })\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      })\n      toast.error('Problem cancelling attendance');\n    }\n  };  \n}\n"]},"metadata":{},"sourceType":"module"}