{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\VSCode\\\\reactdemo\\\\Reactivities\\\\client-app\\\\src\\\\features\\\\user\\\\LoginForm.tsx\";\nimport React, { useContext } from 'react';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { Form, Button, Header } from 'semantic-ui-react';\nimport TextInput from '../../app/common/form/TextInput';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport { FORM_ERROR } from 'final-form';\nimport { combineValidators, isRequired } from 'revalidate';\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\nconst validate = combineValidators({\n  email: isRequired('Email'),\n  password: isRequired('Password')\n});\n\nconst LoginForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    login\n  } = rootStore.userStore;\n  return React.createElement(FinalForm, {\n    onSubmit: values => login(values).catch(error => ({\n      [FORM_ERROR]: error\n    })),\n    validate: validate,\n    render: ({\n      handleSubmit,\n      submitting,\n      submitError,\n      invalid,\n      pristine,\n      dirtySinceLastSubmit\n    }) => React.createElement(Form, {\n      onSubmit: handleSubmit,\n      error: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h2\",\n      content: \"Login to Reactivities\",\n      color: \"teal\",\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"email\",\n      component: TextInput,\n      placeholder: \"Email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"password\",\n      component: TextInput,\n      placeholder: \"Password\",\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), submitError && !dirtySinceLastSubmit && React.createElement(ErrorMessage, {\n      error: submitError,\n      text: \"Invalid email or password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(Button, {\n      disabled: invalid && !dirtySinceLastSubmit || pristine,\n      loading: submitting,\n      color: \"teal\",\n      content: \"Login\",\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  });\n};\n\nexport default LoginForm;","map":{"version":3,"sources":["D:/Development/VSCode/reactdemo/Reactivities/client-app/src/features/user/LoginForm.tsx"],"names":["React","useContext","Form","FinalForm","Field","Button","Header","TextInput","RootStoreContext","FORM_ERROR","combineValidators","isRequired","ErrorMessage","validate","email","password","LoginForm","rootStore","login","userStore","values","catch","error","handleSubmit","submitting","submitError","invalid","pristine","dirtySinceLastSubmit"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,IAAI,IAAIC,SAAjB,EAA4BC,KAA5B,QAAyC,kBAAzC;AACA,SAASF,IAAT,EAAeG,MAAf,EAAuBC,MAAvB,QAAqC,mBAArC;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AAEA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,iBAAT,EAA4BC,UAA5B,QAA8C,YAA9C;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AAEA,MAAMC,QAAQ,GAAGH,iBAAiB,CAAC;AACjCI,EAAAA,KAAK,EAAEH,UAAU,CAAC,OAAD,CADgB;AAEjCI,EAAAA,QAAQ,EAAEJ,UAAU,CAAC,UAAD;AAFa,CAAD,CAAlC;;AAKA,MAAMK,SAAS,GAAG,MAAM;AACtB,QAAMC,SAAS,GAAGhB,UAAU,CAACO,gBAAD,CAA5B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAYD,SAAS,CAACE,SAA5B;AACA,SACE,oBAAC,SAAD;AACE,IAAA,QAAQ,EAAGC,MAAD,IACRF,KAAK,CAACE,MAAD,CAAL,CAAcC,KAAd,CAAoBC,KAAK,KAAK;AAC5B,OAACb,UAAD,GAAca;AADc,KAAL,CAAzB,CAFJ;AAME,IAAA,QAAQ,EAAET,QANZ;AAOE,IAAA,MAAM,EAAE,CAAC;AACPU,MAAAA,YADO;AAEPC,MAAAA,UAFO;AAGPC,MAAAA,WAHO;AAIPC,MAAAA,OAJO;AAKPC,MAAAA,QALO;AAMPC,MAAAA;AANO,KAAD,KAQN,oBAAC,IAAD;AAAM,MAAA,QAAQ,EAAEL,YAAhB;AAA8B,MAAA,KAAK,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,EAAE,EAAC,IADL;AAEE,MAAA,OAAO,EAAC,uBAFV;AAGE,MAAA,KAAK,EAAC,MAHR;AAIE,MAAA,SAAS,EAAC,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAEhB,SAA/B;AAA0C,MAAA,WAAW,EAAC,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAQE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,SAAS,EAAEA,SAFb;AAGE,MAAA,WAAW,EAAC,UAHd;AAIE,MAAA,IAAI,EAAC,UAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,EAcGkB,WAAW,IAAI,CAACG,oBAAhB,IACC,oBAAC,YAAD;AACE,MAAA,KAAK,EAAEH,WADT;AAEE,MAAA,IAAI,EAAC,2BAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfJ,EAoBE,oBAAC,MAAD;AACE,MAAA,QAAQ,EAAGC,OAAO,IAAI,CAACE,oBAAb,IAAsCD,QADlD;AAEE,MAAA,OAAO,EAAEH,UAFX;AAGE,MAAA,KAAK,EAAC,MAHR;AAIE,MAAA,OAAO,EAAC,OAJV;AAKE,MAAA,KAAK,MALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBF,CAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA+CD,CAlDD;;AAoDA,eAAeR,SAAf","sourcesContent":["import React, { useContext } from 'react';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { Form, Button, Header } from 'semantic-ui-react';\r\nimport TextInput from '../../app/common/form/TextInput';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\nimport { IUserFormValues } from '../../app/models/user';\r\nimport { FORM_ERROR } from 'final-form';\r\nimport { combineValidators, isRequired } from 'revalidate';\r\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\r\n\r\nconst validate = combineValidators({\r\n  email: isRequired('Email'),\r\n  password: isRequired('Password')\r\n});\r\n\r\nconst LoginForm = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { login } = rootStore.userStore;\r\n  return (\r\n    <FinalForm\r\n      onSubmit={(values: IUserFormValues) =>\r\n        login(values).catch(error => ({\r\n          [FORM_ERROR]: error\r\n        }))\r\n      }\r\n      validate={validate}\r\n      render={({\r\n        handleSubmit,\r\n        submitting,\r\n        submitError,\r\n        invalid,\r\n        pristine,\r\n        dirtySinceLastSubmit\r\n      }) => (\r\n        <Form onSubmit={handleSubmit} error>\r\n          <Header\r\n            as='h2'\r\n            content='Login to Reactivities'\r\n            color='teal'\r\n            textAlign='center'\r\n          />\r\n          <Field name='email' component={TextInput} placeholder='Email' />\r\n          <Field\r\n            name='password'\r\n            component={TextInput}\r\n            placeholder='Password'\r\n            type='password'\r\n          />\r\n          {submitError && !dirtySinceLastSubmit && (\r\n            <ErrorMessage\r\n              error={submitError}\r\n              text='Invalid email or password'\r\n            />\r\n          )}\r\n          <Button\r\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\r\n            loading={submitting}\r\n            color='teal'\r\n            content='Login'\r\n            fluid\r\n          />\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n"]},"metadata":{},"sourceType":"module"}